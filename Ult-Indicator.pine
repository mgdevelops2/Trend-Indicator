// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© mgonzzo

//@version=5
indicator(title="@gonzo - ultimate vwap/ema", shorttitle="@gonzo - ult", overlay=true, timeframe="", timeframe_gaps=true)

var cumVol = 0.
cumVol += nz(volume)
if barstate.islast and cumVol == 0
    runtime.error("No volume is provided by the data vendor.")
    
computeVWAP(src, isNewPeriod, stDevMultiplier) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na

	sumSrcVol := isNewPeriod ? src * volume : src * volume + sumSrcVol[1]
	sumVol := isNewPeriod ? volume : volume + sumVol[1]
	// sumSrcSrcVol calculates the dividend of the equation that is later used to calculate the standard deviation
	sumSrcSrcVol := isNewPeriod ? volume * math.pow(src, 2) : volume * math.pow(src, 2) + sumSrcSrcVol[1]

	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)

	lowerBand = _vwap - stDev * stDevMultiplier
	upperBand = _vwap + stDev * stDevMultiplier

	[_vwap, lowerBand, upperBand]

hideonDWM = input(false, title="Hide VWAP on 1D or Above", group="VWAP Settings")
var anchor = input.string(defval = "Session", title="Anchor Period",
 options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src = input(title = "Source", defval = hlc3, group="VWAP Settings")
offset = input(0, title="Offset", group="VWAP Settings")

showBands = input(true, title="Calculate 1st Bands", group="Standard Deviation Bands Settings")
stdevMult = input(2.0, title="Bands Multiplier", group="Standard Deviation Bands Settings")

timeChange(period) =>
	ta.change(time(period))

new_earnings = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_dividends = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_split = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)

isNewPeriod = switch anchor
	"Earnings" => not na(new_earnings)
	"Dividends" => not na(new_dividends)
	"Splits" => not na(new_split)
	"Session" => timeChange("D")
	"Week" => timeChange("W")
	"Month" => timeChange("M")
	"Quarter" => timeChange("3M")
	"Year" => timeChange("12M")
	"Decade" => timeChange("12M") and year % 10 == 0
	"Century" => timeChange("12M") and year % 100 == 0
	=> false

isEsdAnchor = anchor == "Earnings" or anchor == "Dividends" or anchor == "Splits"
if na(src[1]) and not isEsdAnchor
	isNewPeriod := true

float vwapValue = na
float std = na
float upperBandValue = na
float lowerBandValue = na

if not (hideonDWM and timeframe.isdwm)
    [_vwap, bottom, top] = computeVWAP(src, isNewPeriod, stdevMult)
    vwapValue := _vwap
    upperBandValue := showBands ? top : na
    lowerBandValue := showBands ? bottom : na

plot(vwapValue, title="VWAP", color=#815EC2, offset=offset)

upperBand1 = plot(upperBandValue, title="Upper Band1", color=#8268B3, offset=offset)
lowerBand1 = plot(lowerBandValue, title="Lower Band1", color=#8268B3, offset=offset)


fill(upperBand1, lowerBand1, title="Bands Fill", color= showBands ? color.new(#E6E1F0, 97) : na)

//get EMAs

//EMA

shortema = input.int(title='Shortema', defval=9, minval=7)
coreema = input.int(title='COREema', defval=13, minval=7)
longema = input.int(title='Longema', defval=21, minval=7)
ema9 = ta.ema(close, shortema)
ema13 = ta.ema(close, coreema)
ema21 = ta.ema(close, longema)


//Plot
ema9plot = plot(ema9, color=color.new(#C9E0E5, 0), style=plot.style_line, linewidth=1, title='EMA(9)', editable=true)
ema13plot = plot(ema13, color=color.new(#0D8AEC, 0), style=plot.style_line, linewidth=1, title='EMA(13)', editable=true)
ema21plot = plot(ema21, color=color.new(#FFC300, 0), style=plot.style_line, linewidth=1, title='EMA(21)', editable=true)
fill(ema9plot, ema21plot, color=ema9 > ema21 ? color.green : color.red, title='fill?', editable=true, transp=70)

//get MACDs
fastMA = input.int(title='MACDfast', defval=12, minval=7)
slowMA = input.int(title='MACDslow', defval=26, minval=7)
signalLength = input.int(title='MACDsignal', defval=9, minval=1)

[currMacd, _, _] = ta.macd(close[0], fastMA, slowMA, signalLength)
[prevMacd, _, _] = ta.macd(close[1], fastMA, slowMA, signalLength)
signal = ta.ema(currMacd, signalLength)

crossoverBear = ta.cross(currMacd, signal) and currMacd < signal ? math.avg(currMacd, signal) : na
crossoverBull = ta.cross(currMacd, signal) and currMacd > signal ? math.avg(currMacd, signal) : na

plotshape(crossoverBear, title='MACD-BEAR', style=shape.circle, text='', location=location.abovebar, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.tiny)
plotshape(crossoverBull, title='MACD-BULL', style=shape.circle, text='', location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.tiny)